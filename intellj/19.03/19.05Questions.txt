19.05 questions 												Name:Pranav

Activity 6

1) List all possible plays for the board 5♠ 4♥ 2♦ 6♣ A♠ J♥ K♦ 5♣ 2♠

  5♠ 6♣
  5♣ 6♣

2) If the deck is empty and the board has three cards left, must they be J, Q, and K? Why or why not?

Yes because everytime two cards are removed unless it is j,q and K. This is because the amount of cards on the table without j,k and q will be an even number. 

3) Does the game involve any strategy? That is, when more than one play is possible, does it matter
which one is chosen? Briefly explain your answer.

It is a pure luck based game because cards are drwan everytime one replaces a pair.

 Activity 7

1)What items would be necessary if you were playing a game of Elevens at your desk (not on the
computer)? List the private instance variables needed for the ElevensBoard class.

Cards.

2) Write an algorithm that describes the actions necessary to play the Elevens game.
start new game 
have 9 cards in the deck 
Draw 9 cards. 
look for J,K and q. 
If j,k and q are present replace them with another card 
look if there are two cards that add up to 11 
If it exists, replace it with another card.
If not replaced the game is lost. 
Repeat the steps until there are no cards remaining on deck 
then the game is won. 

3)Now examine the partially implemented ElevensBoard.java file found in the Activity7
Starter Code directory. Does the ElevensBoard class contain all the state and behavior
necessary to play the game?

Yes it does. 

4)ElevensBoard.java contains three helper methods. These helper methods are private
because they are only called from the ElevensBoard class.

a. Where is the dealMyCards method called in ElevensBoard?

dealMyCards is called in the newGame()method and in the constructor.

b. Which public methods should call the containsPairSum11 and containsJQK
methods?

anotherPlayIsPossible(), and isLeagal().

c. It’s important to understand how the cardIndexes method works, and how the list that it
returns is used. Suppose that cards contains the elements shown below. Trace the execution
of the cardIndexes method to determine what list will be returned. Complete the diagram
below by filling in the elements of the returned list, and by showing how those values index
cards. Note that the returned list may have less than 9 elements.

0,1,2,3,6,7

d.Complete the following printCards method to print all of the elements of cards that are
indexed by cIndexes.
public static printCards(ElevensBoard board) {
 List<Integer> cIndexes = board.cardIndexes();

for (Integer i : cIndexes) {
  System.out.println(board.cards[i].toString());
}

e.Which one of the methods that you identified in question 4b above needs to call the
cardIndexes method before calling the containsPairSum11 and containsJQK
methods? Why?

AnotherPlayIsPossible(). This is because this method needs to verify is the program should start over because of the face that another play can be possible. 

Activity 8

1)Discuss the similarities and differences between Elevens, Thirteens, and Tens. 
Similarities 
Have deck of cards 
have a board 
differences 
they have different rules 
require different functions. etc.

2)As discussed previously, all of the instance variables are declared in the Board class. But it is the
ElevensBoard class that “knows” the board size, and the ranks, suits, and point values of the
cards in the deck. How do the Board instance variables get initialized with the ElevensBoard
values? What is the exact mechanism?

The instance variables is initialised in board class. 

3)Now examine the files Board.java, and ElevensBoard.java, found in the Activity8
Starter Code directory. Identify the abstract methods in Board.java. See how these
methods are implemented in ElevensBoard. Do they cover all the differences between Elevens,
Thirteens, and Tens as discussed in question 1? Why or why not?

the moethoda are omplemented in the board class so they cover the differences.

Activity 9 

1)The size of the board is one of the differences between Elevens and Thirteens. Why is size not an
abstract method?

there is no need for getters and setters because because it is already defiend in superclass. 

2)Why are there no abstract methods dealing with the selection of the cards to be removed or replaced
in the array cards?

it does not need an abstract method because removing and replacing cards are the same in any game. 

3)Another way to create “IS-A” relationships is by implementing interfaces. Suppose that instead of
creating an abstract Board class, we created the following Board interface, and had
ElevensBoard implement it. Would this new scheme allow the Elevens GUI to call isLegal
and anotherPlayIsPossible polymorphically? Would this alternate design work as well as
the abstract Board class design? Why or why not?
 public interface Board
 {
 boolean isLegal(List<Integer> selectedCards);
 boolean anotherPlayIsPossible();
}

isLeagal() and notherPlayIsPossible() would still be called because of polymorphysm. The methods will have ot be implemented seperately for each class.


